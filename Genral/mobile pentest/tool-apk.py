#!/usr/bin/python

import argparse
import zipfile
import subprocess

initStr = "\
#########################################################################\n\
    Automatic checking for general WEB issues\n\
    tool-apk.py\n\
    (version 1.0 06/04/2018 09:58 ITC)\n\
\n\
\n\
      This program is free software. https://github.com/zionspike/\n\
             modification under GPLv2 permitted.\n\
                                                                   Kapi.Z\n\
#########################################################################"

# To extract smali file from apk
# Usage: tool-apk.py -d IsItDown.apk
# Yeild IsItDown direcotry

# To decode dex file to jar file
# Usage: tool-apk.py -s classes.dex
# Yeild classes-dex2jar.jar

# To build directory to APK file
# Usage: tool-apk.py -b IsItDown
# Yeild IsItDown.apk

# To sign an apk file
# Usage: tool-apk.py -s IsItDown.apk
# Yeild IsItDown_signed.apk

# To unzip/extract file
# Usage: tool-apk.py -z IsItDown.apk
# Yeild IsItDown_extract/<files>

# To decompile .jar to Java files
# Some .class cannot be fully decompiled, Use JG-GUI is recommended
# Usage: tool-apk.py -D classes.jar
# Yeild classes_java/<files>.java

def init():
	print initStr

	# Path to apktool.jar
	global path_apktool
	path_apktool = "C:/Users/kapi/Documents/JK-Tools/apktool/"

	# Path to dex2jar.bat, dex2jar.sh
	global path_dex2jar
	path_dex2jar = "C:/Users/kapi/Documents/JK-Tools/dex2jar-2.0/"

	# Path to signApk.jar
	# In signApk directory should contain certificate.pem, and key.pk8
	# To generate certificate use command: 
	# >> openssl genrsa -out key.pem 2048
	# >> openssl req -new -key key.pem -out request.pem
	# >> openssl x509 -req -days 9999 -in request.pem -signkey key.pem -out certificate.pem
	# >> openssl pkcs8 -topk8 -outform DER -in key.pem -inform PEM -out key.pk8 -nocrypt
	global path_signApk
	path_signApk = "C:/Users/kapi/Documents/JK-Tools/signApk/"

	# Path to jad.exe
	# Download: http://www.javadecompilers.com/jad
	global path_jad
	path_jad = "C:/Users/kapi/Documents/JK-Tools/jad/"

def decompile(apkfile):
	print "[!] Decompiling the APK file: java -jar "+path_apktool + "apktool.jar d -f " + str(apkfile)
	print "[!] Please wait..."
	cmd = "java -jar "+path_apktool + "apktool.jar d -f " + str(apkfile)
	p = subprocess.Popen(cmd, stdout=subprocess.PIPE, bufsize=1)
	for line in iter(p.stdout.readline, b''):
	    print "[!] " + line,
	p.stdout.close()
	p.wait()

def dex2jar(dexfile):
	print "[!] Decompiling the DEX file: "
	print "[!] Please wait..."
	
	# Windows
	cmd = path_dex2jar + "d2j-dex2jar.bat " + str(dexfile)

	# Linux
	# cmd = path_dex2jar + "d2j-dex2jar.sh " + str(dexfile)

	p = subprocess.Popen(cmd, stdout=subprocess.PIPE, bufsize=1)
	for line in iter(p.stdout.readline, b''):
	    print "[!] " + line,
	p.stdout.close()
	p.wait()

def build(directory):
	print "[!] Building the directory: java -jar "+path_apktool + "apktool.jar b " + str(directory)
	print "[!] Please wait..."
	cmd = "java -jar "+path_apktool + "apktool.jar b -f " + str(directory)
	p = subprocess.Popen(cmd, stdout=subprocess.PIPE, bufsize=1)
	for line in iter(p.stdout.readline, b''):
	    print "[!] " + line,
	p.stdout.close()
	p.wait()

def sign(apkfile):
	print "[!] Signing the APK file: java -jar "+path_signApk + "signapk.jar " + path_signApk+"certificate.pem " + path_signApk+"key.pk8 " + str(apkfile) + " " + str(apkfile)[:-4]+"_signed.apk"
	print "[!] Please wait..."
	try:
		cmd = "java -jar "+path_signApk + "signapk.jar " + path_signApk+"certificate.pem " + path_signApk+"key.pk8 " + str(apkfile) + " " + str(apkfile)[:-4]+"_signed.apk"
		p = subprocess.Popen(cmd, stdout=subprocess.PIPE, bufsize=1)
		for line in iter(p.stdout.readline, b''):
		    print "[!] " + line,
		p.stdout.close()
		p.wait()
		print "[!] Please check " + str(apkfile)[:-4]+"_signed.apk"
	except Exception as e:
		raise e

def decompilejar(jarfile):
	print "[!] Extracting JAR file using Python zipfile"

	# jad.exe -d . -s java -r **/*.class
	classes_dir = str(jarfile)[:-4] + "_extract"
	try:
		zip_ref = zipfile.ZipFile(jarfile, 'r')
		zip_ref.extractall(classes_dir)
		zip_ref.close()
		print "[!] *.class store in " + classes_dir
	except Exception as e:
		raise e

	java_dir = str(jarfile)[:-4] + "_java_extract"
	print "[!] Decompile .class files using jad.exe"
	print "[!] Please wait..."
	try:
		cmd = path_jad + "jad.exe -d "+java_dir+" -s java -r " + classes_dir + "/**/*.class"
		p = subprocess.Popen(cmd, stdout=subprocess.PIPE, bufsize=1)
		for line in iter(p.stdout.readline, b''):
		    print "[!] " + line,
		p.stdout.close()
		p.wait()
		print "[!] Please check " + str(java_dir)
	except Exception as e:
		raise e


def extract(apkfile):
	directory_to_extract_to = str(apkfile)[:-4] + "_extract"
	print "[!] Extracting APK file to: " + str(directory_to_extract_to)
	print "[!] Please wait..."
	try:
		zip_ref = zipfile.ZipFile(apkfile, 'r')
		zip_ref.extractall(directory_to_extract_to)
		zip_ref.close()
		print "[!] Please check " + directory_to_extract_to
	except Exception as e:
		raise e

if __name__ == "__main__":
	init()
	parser = argparse.ArgumentParser(description='APK depackaging and building')
	parser.add_argument("-d","--decompile", help='APK file to decompile')
	parser.add_argument("-b","--build", help='Directory to build')
	parser.add_argument("-j","--dex2jar", help='Decompile Dex file to Jar')
	parser.add_argument("-s","--sign", help='Sign an APK file')
	parser.add_argument("-z","--extract", help='Extract an APK file using zip')
	parser.add_argument("-D","--djar", help='Decompile Jar file to Java classes')

	args = parser.parse_args()

	if args.decompile:
		decompile(args.decompile)
		exit(0)
	elif args.build:
		build(args.build)
		exit(0)
	elif args.dex2jar:
		dex2jar(args.dex2jar)
		exit(0)
	elif args.sign:
		sign(args.sign)
		exit(0)
	elif args.extract:
		extract(args.extract)
		exit(0)
	elif args.djar:
		decompilejar(args.djar)
		exit(0)